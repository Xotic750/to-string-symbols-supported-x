{"version":3,"sources":["../src/to-string-symbols-supported-x.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,sBAAvB;AACA,OAAO,QAAP,MAAqB,WAArB;AAEA;;AACA,IAAM,SAAS,GAAG,UAAU,IAAI,MAAM,CAAC,SAAP,CAAiB,QAAjD;AACA,IAAM,UAAU,GAAG,OAAO,SAAP,KAAqB,UAArB,IAAmC,QAAtD;AACA;;AACA,IAAM,UAAU,GAAG,GAAG,WAAtB;AAEA;;;;;;;;;;AASA,IAAM,wBAAwB,GAAG,SAAS,wBAAT,CAAkC,KAAlC,EAAyC;AACxE,SAAO,UAAU,IAAI,UAAU,CAAC,KAAD,CAAxB,GAAkC,SAAS,CAAC,IAAV,CAAe,KAAf,CAAlC,GAA0D,UAAU,CAAC,KAAD,CAA3E;AACD,CAFD;;AAIA,eAAe,wBAAf","file":"to-string-symbols-supported-x.esm.js","sourcesContent":["import hasSymbols from 'has-symbol-support-x';\nimport isSymbol from 'is-symbol';\n\n/* eslint-disable-next-line compat/compat */\nconst pToString = hasSymbols && Symbol.prototype.toString;\nconst isSymbolFn = typeof pToString === 'function' && isSymbol;\n/** @type {Function} */\nconst castString = ''.constructor;\n\n/**\n * The abstract operation ToString converts argument to a value of type String,\n * however the specification states that if the argument is a Symbol then a\n * 'TypeError' is thrown. This version also allows Symbols be converted to\n * a string. Other uncoercible exotics will still throw though.\n *\n * @param {*} [value] - The value to convert to a string.\n * @returns {string} The converted value.\n */\nconst toStringSymbolsSupported = function toStringSymbolsSupported(value) {\n  return isSymbolFn && isSymbolFn(value) ? pToString.call(value) : castString(value);\n};\n\nexport default toStringSymbolsSupported;\n"]}